// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TASKHIVE.Data;

#nullable disable

namespace TASKHIVE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250215114542_inital")]
    partial class inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TASKHIVE.Model.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryId"));

                    b.Property<int>("categoryStatus")
                        .HasColumnType("int");

                    b.HasKey("categoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TASKHIVE.Model.Label", b =>
                {
                    b.Property<int>("labelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("labelId"));

                    b.Property<int>("lableName")
                        .HasColumnType("int");

                    b.HasKey("labelId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("TASKHIVE.Model.Meeting", b =>
                {
                    b.Property<int>("meetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("meetingId"));

                    b.Property<string>("meetingLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("scheduledDate")
                        .HasColumnType("datetime2");

                    b.HasKey("meetingId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("TASKHIVE.Model.Project", b =>
                {
                    b.Property<int>("projectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("projectId"));

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("projectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TASKHIVE.Model.Report", b =>
                {
                    b.Property<int>("reportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reportId"));

                    b.Property<string>("reportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("reportDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("reportId");

                    b.HasIndex("userId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("TASKHIVE.Model.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roleId"));

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("roleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TASKHIVE.Model.TimeLog", b =>
                {
                    b.Property<int>("timelogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("timelogId"));

                    b.Property<int>("hoursWorked")
                        .HasColumnType("int");

                    b.Property<DateTime>("logDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("workId")
                        .HasColumnType("int");

                    b.HasKey("timelogId");

                    b.HasIndex("userId");

                    b.HasIndex("workId");

                    b.ToTable("TimeLogs");
                });

            modelBuilder.Entity("TASKHIVE.Model.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasIndex("roleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TASKHIVE.Model.UserMeeting", b =>
                {
                    b.Property<int>("userMeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userMeetingId"));

                    b.Property<int>("meetingId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("userMeetingId");

                    b.HasIndex("meetingId");

                    b.HasIndex("userId");

                    b.ToTable("UserMeeting");
                });

            modelBuilder.Entity("TASKHIVE.Model.UserWork", b =>
                {
                    b.Property<int>("userWorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userWorkId"));

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int>("workId")
                        .HasColumnType("int");

                    b.HasKey("userWorkId");

                    b.HasIndex("userId");

                    b.HasIndex("workId");

                    b.ToTable("UserWorks");
                });

            modelBuilder.Entity("TASKHIVE.Model.Work", b =>
                {
                    b.Property<int>("workId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("workId"));

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("duedate")
                        .HasColumnType("datetime2");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.Property<string>("workName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workPriority")
                        .HasColumnType("int");

                    b.Property<int>("workStatus")
                        .HasColumnType("int");

                    b.HasKey("workId");

                    b.HasIndex("categoryId");

                    b.HasIndex("projectId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("TASKHIVE.Model.WorkLabel", b =>
                {
                    b.Property<int>("workLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("workLabelId"));

                    b.Property<int>("labelId")
                        .HasColumnType("int");

                    b.Property<int>("workId")
                        .HasColumnType("int");

                    b.HasKey("workLabelId");

                    b.HasIndex("labelId");

                    b.HasIndex("workId");

                    b.ToTable("WorkLabels");
                });

            modelBuilder.Entity("TASKHIVE.Model.Report", b =>
                {
                    b.HasOne("TASKHIVE.Model.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TASKHIVE.Model.TimeLog", b =>
                {
                    b.HasOne("TASKHIVE.Model.User", "User")
                        .WithMany("TimeLogs")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASKHIVE.Model.Work", "Work")
                        .WithMany("TimeLogs")
                        .HasForeignKey("workId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("TASKHIVE.Model.User", b =>
                {
                    b.HasOne("TASKHIVE.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TASKHIVE.Model.UserMeeting", b =>
                {
                    b.HasOne("TASKHIVE.Model.Meeting", "Meeting")
                        .WithMany("UserMeetings")
                        .HasForeignKey("meetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASKHIVE.Model.User", "User")
                        .WithMany("UserMeetings")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TASKHIVE.Model.UserWork", b =>
                {
                    b.HasOne("TASKHIVE.Model.User", "User")
                        .WithMany("UserWorks")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASKHIVE.Model.Work", "Work")
                        .WithMany("UserWorks")
                        .HasForeignKey("workId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("TASKHIVE.Model.Work", b =>
                {
                    b.HasOne("TASKHIVE.Model.Category", "Category")
                        .WithMany("Works")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASKHIVE.Model.Project", "Project")
                        .WithMany("Works")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TASKHIVE.Model.WorkLabel", b =>
                {
                    b.HasOne("TASKHIVE.Model.Label", "Label")
                        .WithMany("WorkLabels")
                        .HasForeignKey("labelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TASKHIVE.Model.Work", "Work")
                        .WithMany("WorkLabels")
                        .HasForeignKey("workId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("TASKHIVE.Model.Category", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("TASKHIVE.Model.Label", b =>
                {
                    b.Navigation("WorkLabels");
                });

            modelBuilder.Entity("TASKHIVE.Model.Meeting", b =>
                {
                    b.Navigation("UserMeetings");
                });

            modelBuilder.Entity("TASKHIVE.Model.Project", b =>
                {
                    b.Navigation("Works");
                });

            modelBuilder.Entity("TASKHIVE.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TASKHIVE.Model.User", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("TimeLogs");

                    b.Navigation("UserMeetings");

                    b.Navigation("UserWorks");
                });

            modelBuilder.Entity("TASKHIVE.Model.Work", b =>
                {
                    b.Navigation("TimeLogs");

                    b.Navigation("UserWorks");

                    b.Navigation("WorkLabels");
                });
#pragma warning restore 612, 618
        }
    }
}
